/**
 * This is a Thread class that giving the connection between Client and Server
 * Once I Login a new CC, a new Thread will be set up at {@link CCClientConServer}, 
 * and the Thread is managed by class {@link ManagerClientConServerThread}
 */

package com.cc.client.tools;

import java.io.IOException;
import java.io.ObjectInputStream;

import com.cc.client.model.CCClientConServer;
import com.cc.client.view.CCChat;
import com.cc.client.view.CCFriendList;

import java.net.Socket;

import com.cc.common.Message;
import com.cc.common.MessageType;

public class ClientConServerThread extends Thread {

	private Socket s;

	public Socket getSocket() {
		return s;
	}

	public void setSocket(Socket s) {
		this.s = s;
	}

	public ClientConServerThread(Socket s) {
		this.s = s;
	}

	public void run() {

		while (true) {
			// Keep reading the message that send from Server
			ObjectInputStream ois;
			try {
				ois = new ObjectInputStream(s.getInputStream());
				Message ms = (Message) ois.readObject();

//				if (ms.getMessageType() == null) {
//					System.out.println("null1");
//				}
//				if (ms.getMessageType().equals(MessageType.message_comm_mes)) {
//					// Display the message sent from the Server on the chat
//					// window
					System.out.println(ms.getSender() + " send to "
							+ ms.getGetter() + "  " + ms.getCon());
					CCChat ccchat = ManageCCChat.getCCChat(ms.getGetter() + ""
							+ ms.getSender());
					ccchat.showMessage(ms);

//				} else if (ms.getMessageType().equals(
//						MessageType.message_ret_onLineFriends)) {
//
//					String con = ms.getCon();
//					String friends[] = con.split(" ");
//					String getter = ms.getGetter();
//					// Modify the FriendList
//					CCFriendList ccFriendList = ManageCCFriendList
//							.getCCFriendList(getter);
//
//					// Updated FriendList
//					ccFriendList.updateFriendList(ms);
			

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}

}
